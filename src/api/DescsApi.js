/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Descs from '../model/Descs';

/**
* Descs service.
* @module api/DescsApi
* @version 1.0.0
*/
export default class DescsApi {

    /**
    * Constructs a new DescsApi. 
    * @alias module:api/DescsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createdescs operation.
     * @callback module:api/DescsApi~createdescsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Descs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Descs} descs data to be created
     * @param {module:api/DescsApi~createdescsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Descs}
     */
    createdescs(descs, callback) {
      let postBody = descs;
      // verify the required parameter 'descs' is set
      if (descs === undefined || descs === null) {
        throw new Error("Missing the required parameter 'descs' when calling createdescs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Descs;
      return this.apiClient.callApi(
        '/descs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedescs operation.
     * @callback module:api/DescsApi~deletedescsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} descsId the Id parameter
     * @param {module:api/DescsApi~deletedescsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedescs(descsId, callback) {
      let postBody = null;
      // verify the required parameter 'descsId' is set
      if (descsId === undefined || descsId === null) {
        throw new Error("Missing the required parameter 'descsId' when calling deletedescs");
      }

      let pathParams = {
        'descsId': descsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/descs/{descsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlldescs operation.
     * @callback module:api/DescsApi~getAlldescsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Descs>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/DescsApi~getAlldescsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Descs>}
     */
    getAlldescs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Descs];
      return this.apiClient.callApi(
        '/descs/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdescs operation.
     * @callback module:api/DescsApi~getdescsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Descs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} descsId the Id parameter
     * @param {module:api/DescsApi~getdescsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Descs}
     */
    getdescs(descsId, callback) {
      let postBody = null;
      // verify the required parameter 'descsId' is set
      if (descsId === undefined || descsId === null) {
        throw new Error("Missing the required parameter 'descsId' when calling getdescs");
      }

      let pathParams = {
        'descsId': descsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Descs;
      return this.apiClient.callApi(
        '/descs/{descsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatedescs operation.
     * @callback module:api/DescsApi~updatedescsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Descs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} descsId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Descs} opts.descs data to be updated
     * @param {module:api/DescsApi~updatedescsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Descs}
     */
    updatedescs(descsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['descs'];
      // verify the required parameter 'descsId' is set
      if (descsId === undefined || descsId === null) {
        throw new Error("Missing the required parameter 'descsId' when calling updatedescs");
      }

      let pathParams = {
        'descsId': descsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Descs;
      return this.apiClient.callApi(
        '/descs/{descsId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
